// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rmvnorm
arma::mat rmvnorm(const unsigned int n, const arma::colvec& mean, const arma::mat& squareRootSigma);
RcppExport SEXP _fdahotelling_rmvnorm(SEXP nSEXP, SEXP meanSEXP, SEXP squareRootSigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type squareRootSigma(squareRootSigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(n, mean, squareRootSigma));
    return rcpp_result_gen;
END_RCPP
}
// eigenvalues
arma::colvec eigenvalues(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _fdahotelling_eigenvalues(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(eigenvalues(x, y));
    return rcpp_result_gen;
END_RCPP
}
// pseudoinverse
arma::mat pseudoinverse(const arma::mat& x, const arma::mat& y, const double tolerance);
RcppExport SEXP _fdahotelling_pseudoinverse(SEXP xSEXP, SEXP ySEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudoinverse(x, y, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// stat_hotelling_impl
Rcpp::NumericVector stat_hotelling_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size, const bool use_correction, const double tolerance);
RcppExport SEXP _fdahotelling_stat_hotelling_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP, SEXP use_correctionSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_correction(use_correctionSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_hotelling_impl(x, y, mu, paired, step_size, use_correction, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// stat_L1_impl
Rcpp::NumericVector stat_L1_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size);
RcppExport SEXP _fdahotelling_stat_L1_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_L1_impl(x, y, mu, paired, step_size));
    return rcpp_result_gen;
END_RCPP
}
// stat_L2_impl
Rcpp::NumericVector stat_L2_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size);
RcppExport SEXP _fdahotelling_stat_L2_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_L2_impl(x, y, mu, paired, step_size));
    return rcpp_result_gen;
END_RCPP
}
// stat_Linf_impl
Rcpp::NumericVector stat_Linf_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size);
RcppExport SEXP _fdahotelling_stat_Linf_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_Linf_impl(x, y, mu, paired, step_size));
    return rcpp_result_gen;
END_RCPP
}
// stat_L1_std_impl
Rcpp::NumericVector stat_L1_std_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size);
RcppExport SEXP _fdahotelling_stat_L1_std_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_L1_std_impl(x, y, mu, paired, step_size));
    return rcpp_result_gen;
END_RCPP
}
// stat_L2_std_impl
Rcpp::NumericVector stat_L2_std_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size);
RcppExport SEXP _fdahotelling_stat_L2_std_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_L2_std_impl(x, y, mu, paired, step_size));
    return rcpp_result_gen;
END_RCPP
}
// stat_Linf_std_impl
Rcpp::NumericVector stat_Linf_std_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size);
RcppExport SEXP _fdahotelling_stat_Linf_std_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_Linf_std_impl(x, y, mu, paired, step_size));
    return rcpp_result_gen;
END_RCPP
}
// stat_all_impl
Rcpp::NumericVector stat_all_impl(const arma::mat& x, const arma::mat& y, const arma::colvec& mu, const bool paired, const double step_size);
RcppExport SEXP _fdahotelling_stat_all_impl(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP pairedSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_all_impl(x, y, mu, paired, step_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fdahotelling_rmvnorm", (DL_FUNC) &_fdahotelling_rmvnorm, 3},
    {"_fdahotelling_eigenvalues", (DL_FUNC) &_fdahotelling_eigenvalues, 2},
    {"_fdahotelling_pseudoinverse", (DL_FUNC) &_fdahotelling_pseudoinverse, 3},
    {"_fdahotelling_stat_hotelling_impl", (DL_FUNC) &_fdahotelling_stat_hotelling_impl, 7},
    {"_fdahotelling_stat_L1_impl", (DL_FUNC) &_fdahotelling_stat_L1_impl, 5},
    {"_fdahotelling_stat_L2_impl", (DL_FUNC) &_fdahotelling_stat_L2_impl, 5},
    {"_fdahotelling_stat_Linf_impl", (DL_FUNC) &_fdahotelling_stat_Linf_impl, 5},
    {"_fdahotelling_stat_L1_std_impl", (DL_FUNC) &_fdahotelling_stat_L1_std_impl, 5},
    {"_fdahotelling_stat_L2_std_impl", (DL_FUNC) &_fdahotelling_stat_L2_std_impl, 5},
    {"_fdahotelling_stat_Linf_std_impl", (DL_FUNC) &_fdahotelling_stat_Linf_std_impl, 5},
    {"_fdahotelling_stat_all_impl", (DL_FUNC) &_fdahotelling_stat_all_impl, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_fdahotelling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
